// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package core

import (
	json "encoding/json"
	dag "github.com/hashicorp/terraform/dag"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(in *jlexer.Lexer, out *WinRMAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "https":
			out.HTTPS = bool(in.Bool())
		case "skip_verify":
			out.SkipVerify = bool(in.Bool())
		case "tls_server_name":
			out.TLSServerName = string(in.String())
		case "ca_file":
			out.CAFile = string(in.String())
		case "cert_file":
			out.CertFile = string(in.String())
		case "key_file":
			out.KeyFile = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(out *jwriter.Writer, in WinRMAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.HTTPS {
		const prefix string = ",\"https\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HTTPS))
	}
	if in.SkipVerify {
		const prefix string = ",\"skip_verify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipVerify))
	}
	if in.TLSServerName != "" {
		const prefix string = ",\"tls_server_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TLSServerName))
	}
	if in.CAFile != "" {
		const prefix string = ",\"ca_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CAFile))
	}
	if in.CertFile != "" {
		const prefix string = ",\"cert_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CertFile))
	}
	if in.KeyFile != "" {
		const prefix string = ",\"key_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyFile))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WinRMAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WinRMAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uuid":
			out.UUID = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.UUID != "" {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(in *jlexer.Lexer, out *TerraformJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commands":
			if in.IsNull() {
				in.Skip()
				out.Commands = nil
			} else {
				in.Delim('[')
				if out.Commands == nil {
					if !in.IsDelim(']') {
						out.Commands = make([][]string, 0, 2)
					} else {
						out.Commands = [][]string{}
					}
				} else {
					out.Commands = (out.Commands)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Commands = append(out.Commands, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(out *jwriter.Writer, in TerraformJob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix[1:])
		if in.Commands == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Commands {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.String(string(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"job_id\":"
		out.RawString(prefix)
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerraformJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerraformJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerraformJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerraformJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(in *jlexer.Lexer, out *Team) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_number":
			out.TeamNumber = int(in.Int())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Config)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Tags)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "provisioned_networks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedNetworks = make(map[string]*ProvisionedNetwork)
				} else {
					out.ProvisionedNetworks = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 *ProvisionedNetwork
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(ProvisionedNetwork)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedNetworks)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedHosts = make(map[string]*ProvisionedHost)
				} else {
					out.ProvisionedHosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(ProvisionedHost)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedHosts)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(out *jwriter.Writer, in Team) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.TeamNumber != 0 {
		const prefix string = ",\"team_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamNumber))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Config {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Tags {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"provisioned_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisionedNetworks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.ProvisionedNetworks {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					(*v13Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"provisioned_hosts\":"
		out.RawString(prefix)
		if in.ProvisionedHosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.ProvisionedHosts {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil {
					out.RawString("null")
				} else {
					(*v14Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Team) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Team) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Team) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Team) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = ProvisionStatus(in.String())
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		case "failed":
			out.Failed = bool(in.Bool())
		case "completed":
			out.Completed = bool(in.Bool())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"failed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Failed))
	}
	{
		const prefix string = ",\"completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Completed))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(in *jlexer.Lexer, out *Snapshot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "altgraph":
			if in.IsNull() {
				in.Skip()
				out.AltGraph = nil
			} else {
				if out.AltGraph == nil {
					out.AltGraph = new(dag.AcyclicGraph)
				}
				easyjsonA5722a85DecodeGithubComHashicorpTerraformDag(in, out.AltGraph)
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metastore = make(map[string]*Metadata)
				} else {
					out.Metastore = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 *Metadata
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(Metadata)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					(out.Metastore)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "root_id":
			out.RootID = string(in.String())
		case "edges":
			if m, ok := out.Edges.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Edges.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Edges = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(out *jwriter.Writer, in Snapshot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Checksum))
	}
	{
		const prefix string = ",\"altgraph\":"
		out.RawString(prefix)
		if in.AltGraph == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.AltGraph).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metastore == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Metastore {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil {
					out.RawString("null")
				} else {
					(*v16Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootID))
	}
	{
		const prefix string = ",\"edges\":"
		out.RawString(prefix)
		if m, ok := in.Edges.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Edges.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Edges))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Snapshot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Snapshot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Snapshot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Snapshot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(l, v)
}
func easyjsonA5722a85DecodeGithubComHashicorpTerraformDag(in *jlexer.Lexer, out *dag.AcyclicGraph) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComHashicorpTerraformDag(out *jwriter.Writer, in dag.AcyclicGraph) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(in *jlexer.Lexer, out *ScriptJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset_path":
			out.AssetPath = string(in.String())
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(out *jwriter.Writer, in ScriptJob) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AssetPath != "" {
		const prefix string = ",\"asset_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssetPath))
	}
	{
		const prefix string = ",\"job_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(in *jlexer.Lexer, out *Script) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "source":
			out.Source = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Args = append(out.Args, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 string
					v18 = string(in.String())
					(out.Vars)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Tags)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "findings":
			if in.IsNull() {
				in.Skip()
				out.Findings = nil
			} else {
				in.Delim('[')
				if out.Findings == nil {
					if !in.IsDelim(']') {
						out.Findings = make([]*Finding, 0, 8)
					} else {
						out.Findings = []*Finding{}
					}
				} else {
					out.Findings = (out.Findings)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *Finding
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(Finding)
						}
						(*v20).UnmarshalEasyJSON(in)
					}
					out.Findings = append(out.Findings, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(out *jwriter.Writer, in Script) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Timeout))
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Args {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Vars {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Tags {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if len(in.Findings) != 0 {
		const prefix string = ",\"findings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.Findings {
				if v25 > 0 {
					out.RawByte(',')
				}
				if v26 == nil {
					out.RawString("null")
				} else {
					(*v26).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Script) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Script) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Script) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Script) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(in *jlexer.Lexer, out *SSHAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "identity_file":
			out.IdentityFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(out *jwriter.Writer, in SSHAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.IdentityFile != "" {
		const prefix string = ",\"identity_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SSHAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SSHAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(in *jlexer.Lexer, out *Revision) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = LFType(in.String())
		case "status":
			out.Status = RevStatus(in.String())
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "external_id":
			out.ExternalID = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 string
					v27 = string(in.String())
					(out.Vars)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(out *jwriter.Writer, in Revision) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Checksum))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"external_id\":"
		out.RawString(prefix)
		out.String(string(in.ExternalID))
	}
	{
		const prefix string = ",\"vars\":"
		out.RawString(prefix)
		if in.Vars == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Vars {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				out.String(string(v28Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Revision) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Revision) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Revision) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Revision) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(in *jlexer.Lexer, out *RemoteFileJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset_path":
			out.AssetPath = string(in.String())
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(out *jwriter.Writer, in RemoteFileJob) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AssetPath != "" {
		const prefix string = ",\"asset_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssetPath))
	}
	{
		const prefix string = ",\"job_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteFileJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteFileJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteFileJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteFileJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(in *jlexer.Lexer, out *RemoteFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Vars)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 string
					v30 = string(in.String())
					(out.Tags)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		case "template":
			out.Template = bool(in.Bool())
		case "perms":
			out.Perms = string(in.String())
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "md5":
			out.MD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(out *jwriter.Writer, in RemoteFile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Destination != "" {
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.Vars {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				out.String(string(v31Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Tags {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.String(string(v32Value))
			}
			out.RawByte('}')
		}
	}
	if in.Template {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Template))
	}
	if in.Perms != "" {
		const prefix string = ",\"perms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Perms))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.MD5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(in *jlexer.Lexer, out *Remote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 string
					v33 = string(in.String())
					(out.Config)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(out *jwriter.Writer, in Remote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.Config {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				out.String(string(v34Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Remote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Remote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Remote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Remote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(in *jlexer.Lexer, out *ProvisioningStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "provisioner_id":
			out.ProvisionerID = string(in.String())
		case "provisioner_type":
			out.ProvisionerType = string(in.String())
		case "step_number":
			out.StepNumber = int(in.Int())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(out *jwriter.Writer, in ProvisioningStep) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.ProvisionerID != "" {
		const prefix string = ",\"provisioner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProvisionerID))
	}
	if in.ProvisionerType != "" {
		const prefix string = ",\"provisioner_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProvisionerType))
	}
	if in.StepNumber != 0 {
		const prefix string = ",\"step_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepNumber))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisioningStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisioningStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisioningStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisioningStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(in *jlexer.Lexer, out *ProvisionedNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cidr":
			out.CIDR = string(in.String())
		case "network_id":
			out.NetworkID = string(in.String())
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedHosts = make(map[string]*ProvisionedHost)
				} else {
					out.ProvisionedHosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(ProvisionedHost)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedHosts)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(out *jwriter.Writer, in ProvisionedNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CIDR != "" {
		const prefix string = ",\"cidr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CIDR))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	{
		const prefix string = ",\"provisioned_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisionedHosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.ProvisionedHosts {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				if v36Value == nil {
					out.RawString("null")
				} else {
					(*v36Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisionedNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisionedNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisionedNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisionedNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(in *jlexer.Lexer, out *ProvisionedHost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "host_id":
			out.HostID = string(in.String())
		case "subnet_ip":
			out.SubnetIP = string(in.String())
		case "connection":
			if in.IsNull() {
				in.Skip()
				out.Conn = nil
			} else {
				if out.Conn == nil {
					out.Conn = new(Connection)
				}
				(*out.Conn).UnmarshalEasyJSON(in)
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "provisioning_steps":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisioningSteps = make(map[string]*ProvisioningStep)
				} else {
					out.ProvisioningSteps = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v37 *ProvisioningStep
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(ProvisioningStep)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					(out.ProvisioningSteps)[key] = v37
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(out *jwriter.Writer, in ProvisionedHost) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.HostID != "" {
		const prefix string = ",\"host_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HostID))
	}
	if in.SubnetIP != "" {
		const prefix string = ",\"subnet_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubnetIP))
	}
	{
		const prefix string = ",\"connection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Conn == nil {
			out.RawString("null")
		} else {
			(*in.Conn).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"provisioning_steps\":"
		out.RawString(prefix)
		if in.ProvisioningSteps == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.ProvisioningSteps {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if v38Value == nil {
					out.RawString("null")
				} else {
					(*v38Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisionedHost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisionedHost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(in *jlexer.Lexer, out *Plan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ground_delay":
			out.TaskGroundDelay = int(in.Int())
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Graph = nil
			} else {
				if out.Graph == nil {
					out.Graph = new(Snapshot)
				}
				(*out.Graph).UnmarshalEasyJSON(in)
			}
		case "task_types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TaskTypes = make(map[string]string)
				} else {
					out.TaskTypes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v39 string
					v39 = string(in.String())
					(out.TaskTypes)[key] = v39
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tasks_by_priority":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TasksByPriority = make(map[int][]string)
				} else {
					out.TasksByPriority = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v40 []string
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						in.Delim('[')
						if v40 == nil {
							if !in.IsDelim(']') {
								v40 = make([]string, 0, 4)
							} else {
								v40 = []string{}
							}
						} else {
							v40 = (v40)[:0]
						}
						for !in.IsDelim(']') {
							var v41 string
							v41 = string(in.String())
							v40 = append(v40, v41)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.TasksByPriority)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "global_order":
			if in.IsNull() {
				in.Skip()
				out.GlobalOrder = nil
			} else {
				in.Delim('[')
				if out.GlobalOrder == nil {
					if !in.IsDelim(']') {
						out.GlobalOrder = make([]string, 0, 4)
					} else {
						out.GlobalOrder = []string{}
					}
				} else {
					out.GlobalOrder = (out.GlobalOrder)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.GlobalOrder = append(out.GlobalOrder, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ordered_priorities":
			if in.IsNull() {
				in.Skip()
				out.OrderedPriorities = nil
			} else {
				in.Delim('[')
				if out.OrderedPriorities == nil {
					if !in.IsDelim(']') {
						out.OrderedPriorities = make([]int, 0, 8)
					} else {
						out.OrderedPriorities = []int{}
					}
				} else {
					out.OrderedPriorities = (out.OrderedPriorities)[:0]
				}
				for !in.IsDelim(']') {
					var v43 int
					v43 = int(in.Int())
					out.OrderedPriorities = append(out.OrderedPriorities, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tainted":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tainted = make(map[string]bool)
				} else {
					out.Tainted = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v44 bool
					v44 = bool(in.Bool())
					(out.Tainted)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tainted_hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TaintedHosts = make(map[string]bool)
				} else {
					out.TaintedHosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 bool
					v45 = bool(in.Bool())
					(out.TaintedHosts)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(out *jwriter.Writer, in Plan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ground_delay\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TaskGroundDelay))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Checksum))
	}
	{
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	if in.Graph != nil {
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(*in.Graph).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"task_types\":"
		out.RawString(prefix)
		if in.TaskTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.TaskTypes {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v46Name))
				out.RawByte(':')
				out.String(string(v46Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"tasks_by_priority\":"
		out.RawString(prefix)
		if in.TasksByPriority == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v47First := true
			for v47Name, v47Value := range in.TasksByPriority {
				if v47First {
					v47First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v47Name))
				out.RawByte(':')
				if v47Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v48, v49 := range v47Value {
						if v48 > 0 {
							out.RawByte(',')
						}
						out.String(string(v49))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"global_order\":"
		out.RawString(prefix)
		if in.GlobalOrder == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.GlobalOrder {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ordered_priorities\":"
		out.RawString(prefix)
		if in.OrderedPriorities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.OrderedPriorities {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v53))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tainted\":"
		out.RawString(prefix)
		if in.Tainted == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.Tainted {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v54Name))
				out.RawByte(':')
				out.Bool(bool(v54Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"tainted_hosts\":"
		out.RawString(prefix)
		if in.TaintedHosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.TaintedHosts {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				out.Bool(bool(v55Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(in *jlexer.Lexer, out *Opt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(out *jwriter.Writer, in Opt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(in *jlexer.Lexer, out *OnConflict) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "do":
			out.Do = string(in.String())
		case "append":
			out.Append = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(out *jwriter.Writer, in OnConflict) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Do != "" {
		const prefix string = ",\"do\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Do))
	}
	if in.Append {
		const prefix string = ",\"append\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Append))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnConflict) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnConflict) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnConflict) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnConflict) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cidr":
			out.CIDR = string(in.String())
		case "vdi_visible":
			out.VDIVisible = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v56 string
					v56 = string(in.String())
					(out.Vars)[key] = v56
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v57 string
					v57 = string(in.String())
					(out.Tags)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CIDR != "" {
		const prefix string = ",\"cidr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CIDR))
	}
	if in.VDIVisible {
		const prefix string = ",\"vdi_visible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.VDIVisible))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Vars {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				out.String(string(v58Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Tags {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				out.String(string(v59Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Network) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Network) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Network) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Network) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object_type":
			out.ObjectType = LFType(in.String())
		case "provisioned":
			out.Created = bool(in.Bool())
		case "tainted":
			out.Tainted = bool(in.Bool())
		case "addition":
			out.Addition = bool(in.Bool())
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]MetaResource, 0, 1)
					} else {
						out.Resources = []MetaResource{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v60 MetaResource
					(v60).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"object_type\":"
		out.RawString(prefix)
		out.String(string(in.ObjectType))
	}
	if in.Created {
		const prefix string = ",\"provisioned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Created))
	}
	if in.Tainted {
		const prefix string = ",\"tainted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tainted))
	}
	if in.Addition {
		const prefix string = ",\"addition\":"
		out.RawString(prefix)
		out.Bool(bool(in.Addition))
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Checksum))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v61, v62 := range in.Resources {
				if v61 > 0 {
					out.RawByte(',')
				}
				(v62).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(in *jlexer.Lexer, out *MetaResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "path_from_base":
			out.PathFromBase = string(in.String())
		case "basename":
			out.Basename = string(in.String())
		case "parent_ids":
			if in.IsNull() {
				in.Skip()
				out.ParentIDs = nil
			} else {
				in.Delim('[')
				if out.ParentIDs == nil {
					if !in.IsDelim(']') {
						out.ParentIDs = make([]string, 0, 4)
					} else {
						out.ParentIDs = []string{}
					}
				} else {
					out.ParentIDs = (out.ParentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v63 string
					v63 = string(in.String())
					out.ParentIDs = append(out.ParentIDs, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_dir":
			out.IsDir = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(out *jwriter.Writer, in MetaResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	if in.Basename != "" {
		const prefix string = ",\"basename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Basename))
	}
	if len(in.ParentIDs) != 0 {
		const prefix string = ",\"parent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.ParentIDs {
				if v64 > 0 {
					out.RawByte(',')
				}
				out.String(string(v65))
			}
			out.RawByte(']')
		}
	}
	if in.IsDir {
		const prefix string = ",\"is_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDir))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Checksum))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaResource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaResource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaResource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(in *jlexer.Lexer, out *LocalFileRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "abs_path":
			out.AbsPath = string(in.String())
		case "rel_path":
			out.RelPath = string(in.String())
		case "cwd":
			out.Cwd = string(in.String())
		case "declared_path":
			out.DeclaredPath = string(in.String())
		case "rel_to_call_file":
			out.RelToCallFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(out *jwriter.Writer, in LocalFileRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Base != "" {
		const prefix string = ",\"base\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Base))
	}
	if in.AbsPath != "" {
		const prefix string = ",\"abs_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AbsPath))
	}
	if in.RelPath != "" {
		const prefix string = ",\"rel_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelPath))
	}
	if in.Cwd != "" {
		const prefix string = ",\"cwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cwd))
	}
	if in.DeclaredPath != "" {
		const prefix string = ",\"declared_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeclaredPath))
	}
	if in.RelToCallFile != "" {
		const prefix string = ",\"rel_to_call_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelToCallFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalFileRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalFileRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalFileRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalFileRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(in *jlexer.Lexer, out *Laforge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "include_paths":
			if in.IsNull() {
				in.Skip()
				out.IncludePaths = nil
			} else {
				in.Delim('[')
				if out.IncludePaths == nil {
					if !in.IsDelim(']') {
						out.IncludePaths = make([]*Include, 0, 8)
					} else {
						out.IncludePaths = []*Include{}
					}
				} else {
					out.IncludePaths = (out.IncludePaths)[:0]
				}
				for !in.IsDelim(']') {
					var v66 *Include
					if in.IsNull() {
						in.Skip()
						v66 = nil
					} else {
						if v66 == nil {
							v66 = new(Include)
						}
						(*v66).UnmarshalEasyJSON(in)
					}
					out.IncludePaths = append(out.IncludePaths, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "competitions":
			if in.IsNull() {
				in.Skip()
				out.DefinedCompetitions = nil
			} else {
				in.Delim('[')
				if out.DefinedCompetitions == nil {
					if !in.IsDelim(']') {
						out.DefinedCompetitions = make([]*Competition, 0, 8)
					} else {
						out.DefinedCompetitions = []*Competition{}
					}
				} else {
					out.DefinedCompetitions = (out.DefinedCompetitions)[:0]
				}
				for !in.IsDelim(']') {
					var v67 *Competition
					if in.IsNull() {
						in.Skip()
						v67 = nil
					} else {
						if v67 == nil {
							v67 = new(Competition)
						}
						(*v67).UnmarshalEasyJSON(in)
					}
					out.DefinedCompetitions = append(out.DefinedCompetitions, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedHosts = make([]*Host, 0, 8)
					} else {
						out.DefinedHosts = []*Host{}
					}
				} else {
					out.DefinedHosts = (out.DefinedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v68 *Host
					if in.IsNull() {
						in.Skip()
						v68 = nil
					} else {
						if v68 == nil {
							v68 = new(Host)
						}
						(*v68).UnmarshalEasyJSON(in)
					}
					out.DefinedHosts = append(out.DefinedHosts, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.DefinedNetworks = nil
			} else {
				in.Delim('[')
				if out.DefinedNetworks == nil {
					if !in.IsDelim(']') {
						out.DefinedNetworks = make([]*Network, 0, 8)
					} else {
						out.DefinedNetworks = []*Network{}
					}
				} else {
					out.DefinedNetworks = (out.DefinedNetworks)[:0]
				}
				for !in.IsDelim(']') {
					var v69 *Network
					if in.IsNull() {
						in.Skip()
						v69 = nil
					} else {
						if v69 == nil {
							v69 = new(Network)
						}
						(*v69).UnmarshalEasyJSON(in)
					}
					out.DefinedNetworks = append(out.DefinedNetworks, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identities":
			if in.IsNull() {
				in.Skip()
				out.DefinedIdentities = nil
			} else {
				in.Delim('[')
				if out.DefinedIdentities == nil {
					if !in.IsDelim(']') {
						out.DefinedIdentities = make([]*Identity, 0, 8)
					} else {
						out.DefinedIdentities = []*Identity{}
					}
				} else {
					out.DefinedIdentities = (out.DefinedIdentities)[:0]
				}
				for !in.IsDelim(']') {
					var v70 *Identity
					if in.IsNull() {
						in.Skip()
						v70 = nil
					} else {
						if v70 == nil {
							v70 = new(Identity)
						}
						(*v70).UnmarshalEasyJSON(in)
					}
					out.DefinedIdentities = append(out.DefinedIdentities, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scripts":
			if in.IsNull() {
				in.Skip()
				out.DefinedScripts = nil
			} else {
				in.Delim('[')
				if out.DefinedScripts == nil {
					if !in.IsDelim(']') {
						out.DefinedScripts = make([]*Script, 0, 8)
					} else {
						out.DefinedScripts = []*Script{}
					}
				} else {
					out.DefinedScripts = (out.DefinedScripts)[:0]
				}
				for !in.IsDelim(']') {
					var v71 *Script
					if in.IsNull() {
						in.Skip()
						v71 = nil
					} else {
						if v71 == nil {
							v71 = new(Script)
						}
						(*v71).UnmarshalEasyJSON(in)
					}
					out.DefinedScripts = append(out.DefinedScripts, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_commands":
			if in.IsNull() {
				in.Skip()
				out.DefinedCommands = nil
			} else {
				in.Delim('[')
				if out.DefinedCommands == nil {
					if !in.IsDelim(']') {
						out.DefinedCommands = make([]*Command, 0, 8)
					} else {
						out.DefinedCommands = []*Command{}
					}
				} else {
					out.DefinedCommands = (out.DefinedCommands)[:0]
				}
				for !in.IsDelim(']') {
					var v72 *Command
					if in.IsNull() {
						in.Skip()
						v72 = nil
					} else {
						if v72 == nil {
							v72 = new(Command)
						}
						(*v72).UnmarshalEasyJSON(in)
					}
					out.DefinedCommands = append(out.DefinedCommands, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_files":
			if in.IsNull() {
				in.Skip()
				out.DefinedRemoteFiles = nil
			} else {
				in.Delim('[')
				if out.DefinedRemoteFiles == nil {
					if !in.IsDelim(']') {
						out.DefinedRemoteFiles = make([]*RemoteFile, 0, 8)
					} else {
						out.DefinedRemoteFiles = []*RemoteFile{}
					}
				} else {
					out.DefinedRemoteFiles = (out.DefinedRemoteFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v73 *RemoteFile
					if in.IsNull() {
						in.Skip()
						v73 = nil
					} else {
						if v73 == nil {
							v73 = new(RemoteFile)
						}
						(*v73).UnmarshalEasyJSON(in)
					}
					out.DefinedRemoteFiles = append(out.DefinedRemoteFiles, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_dns_records":
			if in.IsNull() {
				in.Skip()
				out.DefinedDNSRecords = nil
			} else {
				in.Delim('[')
				if out.DefinedDNSRecords == nil {
					if !in.IsDelim(']') {
						out.DefinedDNSRecords = make([]*DNSRecord, 0, 8)
					} else {
						out.DefinedDNSRecords = []*DNSRecord{}
					}
				} else {
					out.DefinedDNSRecords = (out.DefinedDNSRecords)[:0]
				}
				for !in.IsDelim(']') {
					var v74 *DNSRecord
					if in.IsNull() {
						in.Skip()
						v74 = nil
					} else {
						if v74 == nil {
							v74 = new(DNSRecord)
						}
						(*v74).UnmarshalEasyJSON(in)
					}
					out.DefinedDNSRecords = append(out.DefinedDNSRecords, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.DefinedEnvironments = nil
			} else {
				in.Delim('[')
				if out.DefinedEnvironments == nil {
					if !in.IsDelim(']') {
						out.DefinedEnvironments = make([]*Environment, 0, 8)
					} else {
						out.DefinedEnvironments = []*Environment{}
					}
				} else {
					out.DefinedEnvironments = (out.DefinedEnvironments)[:0]
				}
				for !in.IsDelim(']') {
					var v75 *Environment
					if in.IsNull() {
						in.Skip()
						v75 = nil
					} else {
						if v75 == nil {
							v75 = new(Environment)
						}
						(*v75).UnmarshalEasyJSON(in)
					}
					out.DefinedEnvironments = append(out.DefinedEnvironments, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "builds":
			if in.IsNull() {
				in.Skip()
				out.DefinedBuilds = nil
			} else {
				in.Delim('[')
				if out.DefinedBuilds == nil {
					if !in.IsDelim(']') {
						out.DefinedBuilds = make([]*Build, 0, 8)
					} else {
						out.DefinedBuilds = []*Build{}
					}
				} else {
					out.DefinedBuilds = (out.DefinedBuilds)[:0]
				}
				for !in.IsDelim(']') {
					var v76 *Build
					if in.IsNull() {
						in.Skip()
						v76 = nil
					} else {
						if v76 == nil {
							v76 = new(Build)
						}
						(*v76).UnmarshalEasyJSON(in)
					}
					out.DefinedBuilds = append(out.DefinedBuilds, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teams":
			if in.IsNull() {
				in.Skip()
				out.DefinedTeams = nil
			} else {
				in.Delim('[')
				if out.DefinedTeams == nil {
					if !in.IsDelim(']') {
						out.DefinedTeams = make([]*Team, 0, 8)
					} else {
						out.DefinedTeams = []*Team{}
					}
				} else {
					out.DefinedTeams = (out.DefinedTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v77 *Team
					if in.IsNull() {
						in.Skip()
						v77 = nil
					} else {
						if v77 == nil {
							v77 = new(Team)
						}
						(*v77).UnmarshalEasyJSON(in)
					}
					out.DefinedTeams = append(out.DefinedTeams, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioned_networks":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisionedNetworks = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisionedNetworks == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisionedNetworks = make([]*ProvisionedNetwork, 0, 8)
					} else {
						out.DefinedProvisionedNetworks = []*ProvisionedNetwork{}
					}
				} else {
					out.DefinedProvisionedNetworks = (out.DefinedProvisionedNetworks)[:0]
				}
				for !in.IsDelim(']') {
					var v78 *ProvisionedNetwork
					if in.IsNull() {
						in.Skip()
						v78 = nil
					} else {
						if v78 == nil {
							v78 = new(ProvisionedNetwork)
						}
						(*v78).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisionedNetworks = append(out.DefinedProvisionedNetworks, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisionedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisionedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisionedHosts = make([]*ProvisionedHost, 0, 8)
					} else {
						out.DefinedProvisionedHosts = []*ProvisionedHost{}
					}
				} else {
					out.DefinedProvisionedHosts = (out.DefinedProvisionedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v79 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v79 = nil
					} else {
						if v79 == nil {
							v79 = new(ProvisionedHost)
						}
						(*v79).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisionedHosts = append(out.DefinedProvisionedHosts, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioning_steps":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisioningSteps = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisioningSteps == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisioningSteps = make([]*ProvisioningStep, 0, 8)
					} else {
						out.DefinedProvisioningSteps = []*ProvisioningStep{}
					}
				} else {
					out.DefinedProvisioningSteps = (out.DefinedProvisioningSteps)[:0]
				}
				for !in.IsDelim(']') {
					var v80 *ProvisioningStep
					if in.IsNull() {
						in.Skip()
						v80 = nil
					} else {
						if v80 == nil {
							v80 = new(ProvisioningStep)
						}
						(*v80).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisioningSteps = append(out.DefinedProvisioningSteps, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "connections":
			if in.IsNull() {
				in.Skip()
				out.DefinedConnections = nil
			} else {
				in.Delim('[')
				if out.DefinedConnections == nil {
					if !in.IsDelim(']') {
						out.DefinedConnections = make([]*Connection, 0, 8)
					} else {
						out.DefinedConnections = []*Connection{}
					}
				} else {
					out.DefinedConnections = (out.DefinedConnections)[:0]
				}
				for !in.IsDelim(']') {
					var v81 *Connection
					if in.IsNull() {
						in.Skip()
						v81 = nil
					} else {
						if v81 == nil {
							v81 = new(Connection)
						}
						(*v81).UnmarshalEasyJSON(in)
					}
					out.DefinedConnections = append(out.DefinedConnections, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(out *jwriter.Writer, in Laforge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		out.RawString(prefix)
		out.String(string(in.BaseDir))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(*in.User).MarshalEasyJSON(out)
	}
	if len(in.IncludePaths) != 0 {
		const prefix string = ",\"include_paths\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v82, v83 := range in.IncludePaths {
				if v82 > 0 {
					out.RawByte(',')
				}
				if v83 == nil {
					out.RawString("null")
				} else {
					(*v83).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCompetitions) != 0 {
		const prefix string = ",\"competitions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v84, v85 := range in.DefinedCompetitions {
				if v84 > 0 {
					out.RawByte(',')
				}
				if v85 == nil {
					out.RawString("null")
				} else {
					(*v85).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedHosts) != 0 {
		const prefix string = ",\"hosts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v86, v87 := range in.DefinedHosts {
				if v86 > 0 {
					out.RawByte(',')
				}
				if v87 == nil {
					out.RawString("null")
				} else {
					(*v87).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedNetworks) != 0 {
		const prefix string = ",\"networks\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v88, v89 := range in.DefinedNetworks {
				if v88 > 0 {
					out.RawByte(',')
				}
				if v89 == nil {
					out.RawString("null")
				} else {
					(*v89).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedIdentities) != 0 {
		const prefix string = ",\"identities\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v90, v91 := range in.DefinedIdentities {
				if v90 > 0 {
					out.RawByte(',')
				}
				if v91 == nil {
					out.RawString("null")
				} else {
					(*v91).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedScripts) != 0 {
		const prefix string = ",\"scripts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v92, v93 := range in.DefinedScripts {
				if v92 > 0 {
					out.RawByte(',')
				}
				if v93 == nil {
					out.RawString("null")
				} else {
					(*v93).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCommands) != 0 {
		const prefix string = ",\"defined_commands\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v94, v95 := range in.DefinedCommands {
				if v94 > 0 {
					out.RawByte(',')
				}
				if v95 == nil {
					out.RawString("null")
				} else {
					(*v95).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedRemoteFiles) != 0 {
		const prefix string = ",\"defined_files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v96, v97 := range in.DefinedRemoteFiles {
				if v96 > 0 {
					out.RawByte(',')
				}
				if v97 == nil {
					out.RawString("null")
				} else {
					(*v97).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedDNSRecords) != 0 {
		const prefix string = ",\"defined_dns_records\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v98, v99 := range in.DefinedDNSRecords {
				if v98 > 0 {
					out.RawByte(',')
				}
				if v99 == nil {
					out.RawString("null")
				} else {
					(*v99).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedEnvironments) != 0 {
		const prefix string = ",\"environments\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v100, v101 := range in.DefinedEnvironments {
				if v100 > 0 {
					out.RawByte(',')
				}
				if v101 == nil {
					out.RawString("null")
				} else {
					(*v101).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedBuilds) != 0 {
		const prefix string = ",\"builds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v102, v103 := range in.DefinedBuilds {
				if v102 > 0 {
					out.RawByte(',')
				}
				if v103 == nil {
					out.RawString("null")
				} else {
					(*v103).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedTeams) != 0 {
		const prefix string = ",\"teams\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v104, v105 := range in.DefinedTeams {
				if v104 > 0 {
					out.RawByte(',')
				}
				if v105 == nil {
					out.RawString("null")
				} else {
					(*v105).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisionedNetworks) != 0 {
		const prefix string = ",\"provisioned_networks\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v106, v107 := range in.DefinedProvisionedNetworks {
				if v106 > 0 {
					out.RawByte(',')
				}
				if v107 == nil {
					out.RawString("null")
				} else {
					(*v107).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisionedHosts) != 0 {
		const prefix string = ",\"provisioned_hosts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v108, v109 := range in.DefinedProvisionedHosts {
				if v108 > 0 {
					out.RawByte(',')
				}
				if v109 == nil {
					out.RawString("null")
				} else {
					(*v109).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisioningSteps) != 0 {
		const prefix string = ",\"provisioning_steps\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v110, v111 := range in.DefinedProvisioningSteps {
				if v110 > 0 {
					out.RawByte(',')
				}
				if v111 == nil {
					out.RawString("null")
				} else {
					(*v111).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedConnections) != 0 {
		const prefix string = ",\"connections\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v112, v113 := range in.DefinedConnections {
				if v112 > 0 {
					out.RawByte(',')
				}
				if v113 == nil {
					out.RawString("null")
				} else {
					(*v113).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Laforge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Laforge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Laforge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Laforge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(in *jlexer.Lexer, out *IncludedNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "included_hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v114 string
					v114 = string(in.String())
					out.Hosts = append(out.Hosts, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(out *jwriter.Writer, in IncludedNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"included_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v115, v116 := range in.Hosts {
				if v115 > 0 {
					out.RawByte(',')
				}
				out.String(string(v116))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncludedNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncludedNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(in *jlexer.Lexer, out *Include) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(out *jwriter.Writer, in Include) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Include) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Include) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Include) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Include) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar_file":
			out.AvatarFile = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v117 string
					v117 = string(in.String())
					(out.Vars)[key] = v117
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v118 string
					v118 = string(in.String())
					(out.Tags)[key] = v118
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Firstname != "" {
		const prefix string = ",\"firstname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Firstname))
	}
	if in.Lastname != "" {
		const prefix string = ",\"lastname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Lastname))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.AvatarFile != "" {
		const prefix string = ",\"avatar_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarFile))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v119First := true
			for v119Name, v119Value := range in.Vars {
				if v119First {
					v119First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v119Name))
				out.RawByte(':')
				out.String(string(v119Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v120First := true
			for v120Name, v120Value := range in.Tags {
				if v120First {
					v120First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v120Name))
				out.RawByte(':')
				out.String(string(v120Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(in *jlexer.Lexer, out *IO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stdin":
			out.Stdin = string(in.String())
		case "stdout":
			out.Stdout = string(in.String())
		case "stderr":
			out.Stderr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(out *jwriter.Writer, in IO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Stdin != "" {
		const prefix string = ",\"stdin\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Stdin))
	}
	if in.Stdout != "" {
		const prefix string = ",\"stdout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stdout))
	}
	if in.Stderr != "" {
		const prefix string = ",\"stderr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stderr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(in *jlexer.Lexer, out *HostDependency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.HostID = string(in.String())
		case "network":
			out.NetworkID = string(in.String())
		case "step":
			out.Step = string(in.String())
		case "step_id":
			out.StepID = int(in.Int())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(out *jwriter.Writer, in HostDependency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HostID != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.HostID))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	if in.Step != "" {
		const prefix string = ",\"step\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Step))
	}
	if in.StepID != 0 {
		const prefix string = ",\"step_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepID))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HostDependency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HostDependency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HostDependency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HostDependency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(in *jlexer.Lexer, out *Host) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "ami":
			out.AMI = string(in.String())
		case "last_octet":
			out.LastOctet = int(in.Int())
		case "instance_size":
			out.InstanceSize = string(in.String())
		case "disk":
			(out.Disk).UnmarshalEasyJSON(in)
		case "provision_steps":
			if in.IsNull() {
				in.Skip()
				out.ProvisionSteps = nil
			} else {
				in.Delim('[')
				if out.ProvisionSteps == nil {
					if !in.IsDelim(']') {
						out.ProvisionSteps = make([]string, 0, 4)
					} else {
						out.ProvisionSteps = []string{}
					}
				} else {
					out.ProvisionSteps = (out.ProvisionSteps)[:0]
				}
				for !in.IsDelim(']') {
					var v121 string
					v121 = string(in.String())
					out.ProvisionSteps = append(out.ProvisionSteps, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_tcp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedTCPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedTCPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedTCPPorts = make([]string, 0, 4)
					} else {
						out.ExposedTCPPorts = []string{}
					}
				} else {
					out.ExposedTCPPorts = (out.ExposedTCPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v122 string
					v122 = string(in.String())
					out.ExposedTCPPorts = append(out.ExposedTCPPorts, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_udp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedUDPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedUDPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedUDPPorts = make([]string, 0, 4)
					} else {
						out.ExposedUDPPorts = []string{}
					}
				} else {
					out.ExposedUDPPorts = (out.ExposedUDPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v123 string
					v123 = string(in.String())
					out.ExposedUDPPorts = append(out.ExposedUDPPorts, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "override_password":
			out.OverridePassword = string(in.String())
		case "user_groups":
			if in.IsNull() {
				in.Skip()
				out.UserGroups = nil
			} else {
				in.Delim('[')
				if out.UserGroups == nil {
					if !in.IsDelim(']') {
						out.UserGroups = make([]string, 0, 4)
					} else {
						out.UserGroups = []string{}
					}
				} else {
					out.UserGroups = (out.UserGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v124 string
					v124 = string(in.String())
					out.UserGroups = append(out.UserGroups, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "depends_on":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]*HostDependency, 0, 8)
					} else {
						out.Dependencies = []*HostDependency{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v125 *HostDependency
					if in.IsNull() {
						in.Skip()
						v125 = nil
					} else {
						if v125 == nil {
							v125 = new(HostDependency)
						}
						(*v125).UnmarshalEasyJSON(in)
					}
					out.Dependencies = append(out.Dependencies, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v126 string
					v126 = string(in.String())
					(out.Vars)[key] = v126
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v127 string
					v127 = string(in.String())
					(out.Tags)[key] = v127
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(out *jwriter.Writer, in Host) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.AMI != "" {
		const prefix string = ",\"ami\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AMI))
	}
	if in.LastOctet != 0 {
		const prefix string = ",\"last_octet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastOctet))
	}
	if in.InstanceSize != "" {
		const prefix string = ",\"instance_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InstanceSize))
	}
	if true {
		const prefix string = ",\"disk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Disk).MarshalEasyJSON(out)
	}
	if len(in.ProvisionSteps) != 0 {
		const prefix string = ",\"provision_steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.ProvisionSteps {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.String(string(v129))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedTCPPorts) != 0 {
		const prefix string = ",\"exposed_tcp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v130, v131 := range in.ExposedTCPPorts {
				if v130 > 0 {
					out.RawByte(',')
				}
				out.String(string(v131))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedUDPPorts) != 0 {
		const prefix string = ",\"exposed_udp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.ExposedUDPPorts {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.String(string(v133))
			}
			out.RawByte(']')
		}
	}
	if in.OverridePassword != "" {
		const prefix string = ",\"override_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OverridePassword))
	}
	if len(in.UserGroups) != 0 {
		const prefix string = ",\"user_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v134, v135 := range in.UserGroups {
				if v134 > 0 {
					out.RawByte(',')
				}
				out.String(string(v135))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"depends_on\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v136, v137 := range in.Dependencies {
				if v136 > 0 {
					out.RawByte(',')
				}
				if v137 == nil {
					out.RawString("null")
				} else {
					(*v137).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v138First := true
			for v138Name, v138Value := range in.Vars {
				if v138First {
					v138First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v138Name))
				out.RawByte(':')
				out.String(string(v138Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v139First := true
			for v139Name, v139Value := range in.Tags {
				if v139First {
					v139First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v139Name))
				out.RawByte(':')
				out.String(string(v139Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Host) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Host) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Host) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Host) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(in *jlexer.Lexer, out *GenericJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(out *jwriter.Writer, in GenericJob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(in *jlexer.Lexer, out *Finding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "severity":
			out.Severity = FindingSeverity(in.Int())
		case "difficulty":
			out.Difficulty = FindingDifficulty(in.Int())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v140 string
					v140 = string(in.String())
					out.Tags = append(out.Tags, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(out *jwriter.Writer, in Finding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Severity != 0 {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Severity))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Difficulty))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.Tags {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Finding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Finding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Finding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Finding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "competition_id":
			out.CompetitionID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "builder":
			out.Builder = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "admin_ranges":
			if in.IsNull() {
				in.Skip()
				out.AdminCIDRs = nil
			} else {
				in.Delim('[')
				if out.AdminCIDRs == nil {
					if !in.IsDelim(']') {
						out.AdminCIDRs = make([]string, 0, 4)
					} else {
						out.AdminCIDRs = []string{}
					}
				} else {
					out.AdminCIDRs = (out.AdminCIDRs)[:0]
				}
				for !in.IsDelim(']') {
					var v143 string
					v143 = string(in.String())
					out.AdminCIDRs = append(out.AdminCIDRs, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v144 string
					v144 = string(in.String())
					(out.Config)[key] = v144
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v145 string
					v145 = string(in.String())
					(out.Tags)[key] = v145
					in.WantComma()
				}
				in.Delim('}')
			}
		case "included_networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]*IncludedNetwork, 0, 8)
					} else {
						out.Networks = []*IncludedNetwork{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v146 *IncludedNetwork
					if in.IsNull() {
						in.Skip()
						v146 = nil
					} else {
						if v146 == nil {
							v146 = new(IncludedNetwork)
						}
						(*v146).UnmarshalEasyJSON(in)
					}
					out.Networks = append(out.Networks, v146)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "base_dir":
			out.BaseDir = string(in.String())
		case "revision":
			out.Revision = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.CompetitionID != "" {
		const prefix string = ",\"competition_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompetitionID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Builder != "" {
		const prefix string = ",\"builder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Builder))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.AdminCIDRs) != 0 {
		const prefix string = ",\"admin_ranges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v147, v148 := range in.AdminCIDRs {
				if v147 > 0 {
					out.RawByte(',')
				}
				out.String(string(v148))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v149First := true
			for v149Name, v149Value := range in.Config {
				if v149First {
					v149First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v149Name))
				out.RawByte(':')
				out.String(string(v149Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v150First := true
			for v150Name, v150Value := range in.Tags {
				if v150First {
					v150First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v150Name))
				out.RawByte(':')
				out.String(string(v150Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Networks) != 0 {
		const prefix string = ",\"included_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v151, v152 := range in.Networks {
				if v151 > 0 {
					out.RawByte(',')
				}
				if v152 == nil {
					out.RawString("null")
				} else {
					(*v152).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Environment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Environment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Environment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Environment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(in *jlexer.Lexer, out *Edge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "target":
			out.Target = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(out *jwriter.Writer, in Edge) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != "" {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	if in.Target != "" {
		const prefix string = ",\"target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Target))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Edge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Edge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Edge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Edge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore34(in *jlexer.Lexer, out *Disk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore34(out *jwriter.Writer, in Disk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Disk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Disk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore34(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore35(in *jlexer.Lexer, out *DNSRecordJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore35(out *jwriter.Writer, in DNSRecordJob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNSRecordJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSRecordJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNSRecordJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSRecordJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore35(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore36(in *jlexer.Lexer, out *DNSRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v153 string
					v153 = string(in.String())
					out.Values = append(out.Values, v153)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "zone":
			out.Zone = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v154 string
					v154 = string(in.String())
					(out.Vars)[key] = v154
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v155 string
					v155 = string(in.String())
					(out.Tags)[key] = v155
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore36(out *jwriter.Writer, in DNSRecord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v156, v157 := range in.Values {
				if v156 > 0 {
					out.RawByte(',')
				}
				out.String(string(v157))
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Zone != "" {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zone))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v158First := true
			for v158Name, v158Value := range in.Vars {
				if v158First {
					v158First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v158Name))
				out.RawByte(':')
				out.String(string(v158Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v159First := true
			for v159Name, v159Value := range in.Tags {
				if v159First {
					v159First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v159Name))
				out.RawByte(':')
				out.String(string(v159Value))
			}
			out.RawByte('}')
		}
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNSRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNSRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore36(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore37(in *jlexer.Lexer, out *DNS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "root_domain":
			out.RootDomain = string(in.String())
		case "dns_servers":
			if in.IsNull() {
				in.Skip()
				out.DNSServers = nil
			} else {
				in.Delim('[')
				if out.DNSServers == nil {
					if !in.IsDelim(']') {
						out.DNSServers = make([]string, 0, 4)
					} else {
						out.DNSServers = []string{}
					}
				} else {
					out.DNSServers = (out.DNSServers)[:0]
				}
				for !in.IsDelim(']') {
					var v160 string
					v160 = string(in.String())
					out.DNSServers = append(out.DNSServers, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ntp_servers":
			if in.IsNull() {
				in.Skip()
				out.NTPServers = nil
			} else {
				in.Delim('[')
				if out.NTPServers == nil {
					if !in.IsDelim(']') {
						out.NTPServers = make([]string, 0, 4)
					} else {
						out.NTPServers = []string{}
					}
				} else {
					out.NTPServers = (out.NTPServers)[:0]
				}
				for !in.IsDelim(']') {
					var v161 string
					v161 = string(in.String())
					out.NTPServers = append(out.NTPServers, v161)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v162 string
					v162 = string(in.String())
					(out.Config)[key] = v162
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore37(out *jwriter.Writer, in DNS) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.RootDomain != "" {
		const prefix string = ",\"root_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootDomain))
	}
	if len(in.DNSServers) != 0 {
		const prefix string = ",\"dns_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v163, v164 := range in.DNSServers {
				if v163 > 0 {
					out.RawByte(',')
				}
				out.String(string(v164))
			}
			out.RawByte(']')
		}
	}
	if len(in.NTPServers) != 0 {
		const prefix string = ",\"ntp_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v165, v166 := range in.NTPServers {
				if v165 > 0 {
					out.RawByte(',')
				}
				out.String(string(v166))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v167First := true
			for v167Name, v167Value := range in.Config {
				if v167First {
					v167First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v167Name))
				out.RawByte(':')
				out.String(string(v167Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore37(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore38(in *jlexer.Lexer, out *Connection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "local_addr":
			out.LocalAddr = string(in.String())
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "resource_name":
			out.ResourceName = string(in.String())
		case "ssh":
			if in.IsNull() {
				in.Skip()
				out.SSHAuthConfig = nil
			} else {
				if out.SSHAuthConfig == nil {
					out.SSHAuthConfig = new(SSHAuthConfig)
				}
				(*out.SSHAuthConfig).UnmarshalEasyJSON(in)
			}
		case "winrm":
			if in.IsNull() {
				in.Skip()
				out.WinRMAuthConfig = nil
			} else {
				if out.WinRMAuthConfig == nil {
					out.WinRMAuthConfig = new(WinRMAuthConfig)
				}
				(*out.WinRMAuthConfig).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore38(out *jwriter.Writer, in Connection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Active {
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	if in.LocalAddr != "" {
		const prefix string = ",\"local_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalAddr))
	}
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.ResourceName != "" {
		const prefix string = ",\"resource_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceName))
	}
	if in.SSHAuthConfig != nil {
		const prefix string = ",\"ssh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SSHAuthConfig).MarshalEasyJSON(out)
	}
	if in.WinRMAuthConfig != nil {
		const prefix string = ",\"winrm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WinRMAuthConfig).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Connection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Connection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Connection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Connection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore38(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore39(in *jlexer.Lexer, out *Competition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "root_password":
			out.RootPassword = string(in.String())
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNS = nil
			} else {
				if out.DNS == nil {
					out.DNS = new(DNS)
				}
				(*out.DNS).UnmarshalEasyJSON(in)
			}
		case "remote":
			if in.IsNull() {
				in.Skip()
				out.Remote = nil
			} else {
				if out.Remote == nil {
					out.Remote = new(Remote)
				}
				(*out.Remote).UnmarshalEasyJSON(in)
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v168 string
					v168 = string(in.String())
					(out.Config)[key] = v168
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore39(out *jwriter.Writer, in Competition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.RootPassword != "" {
		const prefix string = ",\"root_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootPassword))
	}
	if in.DNS != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DNS).MarshalEasyJSON(out)
	}
	if in.Remote != nil {
		const prefix string = ",\"remote\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Remote).MarshalEasyJSON(out)
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v169First := true
			for v169Name, v169Value := range in.Config {
				if v169First {
					v169First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v169Name))
				out.RawByte(':')
				out.String(string(v169Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Competition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Competition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Competition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Competition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore39(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore40(in *jlexer.Lexer, out *CommandJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v170 string
					v170 = string(in.String())
					out.Command = append(out.Command, v170)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "good_output_regexp":
			out.GoodOutputRegexp = string(in.String())
		case "job_id":
			out.JobID = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "timeout":
			out.Timeout = int(in.Int())
		case "job_type":
			out.JobType = string(in.String())
		case "metadata_id":
			out.MetadataID = string(in.String())
		case "status":
			out.Status = JobStatus(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore40(out *jwriter.Writer, in CommandJob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"command\":"
		out.RawString(prefix[1:])
		if in.Command == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v171, v172 := range in.Command {
				if v171 > 0 {
					out.RawByte(',')
				}
				out.String(string(v172))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"good_output_regexp\":"
		out.RawString(prefix)
		out.String(string(in.GoodOutputRegexp))
	}
	{
		const prefix string = ",\"job_id\":"
		out.RawString(prefix)
		out.String(string(in.JobID))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	{
		const prefix string = ",\"job_type\":"
		out.RawString(prefix)
		out.String(string(in.JobType))
	}
	{
		const prefix string = ",\"metadata_id\":"
		out.RawString(prefix)
		out.String(string(in.MetadataID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		out.RawString(prefix)
		out.Raw((in.EndedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore40(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore41(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "program":
			out.Program = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v173 string
					v173 = string(in.String())
					out.Args = append(out.Args, v173)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v174 string
					v174 = string(in.String())
					(out.Vars)[key] = v174
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v175 string
					v175 = string(in.String())
					(out.Tags)[key] = v175
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore41(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Program != "" {
		const prefix string = ",\"program\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Program))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v176, v177 := range in.Args {
				if v176 > 0 {
					out.RawByte(',')
				}
				out.String(string(v177))
			}
			out.RawByte(']')
		}
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v178First := true
			for v178Name, v178Value := range in.Vars {
				if v178First {
					v178First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v178Name))
				out.RawByte(':')
				out.String(string(v178Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v179First := true
			for v179Name, v179Value := range in.Tags {
				if v179First {
					v179First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v179Name))
				out.RawByte(':')
				out.String(string(v179Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore41(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore42(in *jlexer.Lexer, out *ChecksumList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ChecksumList, 0, 8)
			} else {
				*out = ChecksumList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v180 uint64
			v180 = uint64(in.Uint64())
			*out = append(*out, v180)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore42(out *jwriter.Writer, in ChecksumList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v181, v182 := range in {
			if v181 > 0 {
				out.RawByte(',')
			}
			out.Uint64(uint64(v182))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ChecksumList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecksumList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecksumList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecksumList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore42(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore43(in *jlexer.Lexer, out *Build) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v183 string
					v183 = string(in.String())
					(out.Config)[key] = v183
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v184 string
					v184 = string(in.String())
					(out.Tags)[key] = v184
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "path_from_base":
			out.PathFromBase = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore43(out *jwriter.Writer, in Build) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v185First := true
			for v185Name, v185Value := range in.Config {
				if v185First {
					v185First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v185Name))
				out.RawByte(':')
				out.String(string(v185Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v186First := true
			for v186Name, v186Value := range in.Tags {
				if v186First {
					v186First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v186Name))
				out.RawByte(':')
				out.String(string(v186Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Build) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Build) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Build) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Build) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore43(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore44(in *jlexer.Lexer, out *AMI) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "provider":
			out.Provider = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v187 string
					v187 = string(in.String())
					(out.Vars)[key] = v187
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v188 string
					v188 = string(in.String())
					(out.Tags)[key] = v188
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore44(out *jwriter.Writer, in AMI) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Provider != "" {
		const prefix string = ",\"provider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Provider))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v189First := true
			for v189Name, v189Value := range in.Vars {
				if v189First {
					v189First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v189Name))
				out.RawByte(':')
				out.String(string(v189Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v190First := true
			for v190Name, v190Value := range in.Tags {
				if v190First {
					v190First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v190Name))
				out.RawByte(':')
				out.String(string(v190Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AMI) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AMI) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AMI) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AMI) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore44(l, v)
}
